from collections.abc import Generator
from typing import NamedTuple

from _typeshed import Incomplete

from . import enums, errors, utils

class DeclarationWithContext(NamedTuple):
    name: Incomplete
    declaration: Incomplete
    context: Incomplete

class DeclarationSet:
    declarations: Incomplete
    contexts: Incomplete
    def __init__(self, initial: Incomplete | None = ...) -> None: ...
    @classmethod
    def split(cls, entry): ...
    @classmethod
    def join(cls, root, subkey): ...
    def copy(self): ...
    def update(self, values) -> None: ...
    def filter(self, entries): ...
    def sorted(self): ...
    def __contains__(self, key): ...
    def __getitem__(self, key): ...
    def __iter__(self): ...
    def values(self) -> Generator[Incomplete, None, None]: ...
    def as_dict(self): ...

def parse_declarations(
    decls, base_pre: Incomplete | None = ..., base_post: Incomplete | None = ...
): ...

class BuildStep:
    builder: Incomplete
    sequence: Incomplete
    attributes: Incomplete
    parent_step: Incomplete
    stub: Incomplete
    def __init__(
        self, builder, sequence, parent_step: Incomplete | None = ...
    ) -> None: ...
    def resolve(self, declarations) -> None: ...
    @property
    def chain(self): ...
    def recurse(
        self, factory, declarations, force_sequence: Incomplete | None = ...
    ): ...

class StepBuilder:
    factory_meta: Incomplete
    strategy: Incomplete
    extras: Incomplete
    force_init_sequence: Incomplete
    def __init__(self, factory_meta, extras, strategy) -> None: ...
    def build(
        self,
        parent_step: Incomplete | None = ...,
        force_sequence: Incomplete | None = ...,
    ): ...
    def recurse(self, factory_meta, extras): ...

class Resolver:
    def __init__(self, declarations, step, sequence) -> None: ...
    @property
    def factory_parent(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...
