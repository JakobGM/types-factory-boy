import typing as T
from . import enums as enums, errors as errors, utils as utils
from _typeshed import Incomplete

logger: Incomplete

class BaseDeclaration(utils.OrderedBase):
    FACTORY_BUILDER_PHASE: Incomplete
    UNROLL_CONTEXT_BEFORE_EVALUATION: bool
    def __init__(self, **defaults) -> None: ...
    def unroll_context(self, instance, step, context): ...
    def evaluate_pre(self, instance, step, overrides): ...
    def evaluate(self, instance, step, extra) -> None: ...

class OrderedDeclaration(BaseDeclaration): ...

class LazyFunction(BaseDeclaration):
    function: Incomplete
    def __init__(self, function) -> None: ...
    def evaluate(self, instance, step, extra): ...

class LazyAttribute(BaseDeclaration):
    function: Incomplete
    def __init__(self, function) -> None: ...
    def evaluate(self, instance, step, extra): ...

class _UNSPECIFIED: ...

def deepgetattr(obj, name, default=...): ...

class SelfAttribute(BaseDeclaration):
    depth: Incomplete
    attribute_name: Incomplete
    default: Incomplete
    def __init__(self, attribute_name, default=...) -> None: ...
    def evaluate(self, instance, step, extra): ...

class Iterator(BaseDeclaration):
    getter: Incomplete
    iterator: Incomplete
    iterator_builder: Incomplete
    def __init__(self, iterator, cycle: bool = ..., getter: Incomplete | None = ...): ...
    def evaluate(self, instance, step, extra): ...
    def reset(self) -> None: ...

class Sequence(BaseDeclaration):
    function: Incomplete
    def __init__(self, function) -> None: ...
    def evaluate(self, instance, step, extra): ...

class LazyAttributeSequence(Sequence):
    def evaluate(self, instance, step, extra): ...

class ContainerAttribute(BaseDeclaration):
    function: Incomplete
    strict: Incomplete
    def __init__(self, function, strict: bool = ...) -> None: ...
    def evaluate(self, instance, step, extra): ...

class ParameteredAttribute(BaseDeclaration):
    def evaluate(self, instance, step, extra): ...
    def generate(self, step, params) -> None: ...

class _FactoryWrapper:
    factory: Incomplete
    module: str
    def __init__(self, factory_or_path) -> None: ...
    def get(self): ...

class SubFactory(BaseDeclaration):
    FORCE_SEQUENCE: bool
    UNROLL_CONTEXT_BEFORE_EVALUATION: bool
    factory_wrapper: Incomplete
    def __init__(self, factory, **kwargs) -> None: ...
    def get_factory(self): ...
    def evaluate(self, instance, step, extra): ...

class Dict(SubFactory):
    FORCE_SEQUENCE: bool
    def __init__(self, params, dict_factory: str = ...) -> None: ...

class List(SubFactory):
    FORCE_SEQUENCE: bool
    def __init__(self, params, list_factory: str = ...) -> None: ...

class Skip:
    def __bool__(self): ...

SKIP: Incomplete

class Maybe(BaseDeclaration):
    decider: Incomplete
    yes: Incomplete
    no: Incomplete
    FACTORY_BUILDER_PHASE: Incomplete
    def __init__(self, decider, yes_declaration=..., no_declaration=...) -> None: ...
    def evaluate_post(self, instance, step, overrides): ...
    def evaluate_pre(self, instance, step, overrides): ...

class Parameter(utils.OrderedBase):
    def as_declarations(self, field_name, declarations) -> None: ...
    def get_revdeps(self, parameters): ...

class SimpleParameter(Parameter):
    value: Incomplete
    def __init__(self, value) -> None: ...
    def as_declarations(self, field_name, declarations): ...
    @classmethod
    def wrap(cls, value): ...

class Trait(Parameter):
    overrides: Incomplete
    def __init__(self, **overrides) -> None: ...
    def as_declarations(self, field_name, declarations): ...
    def get_revdeps(self, parameters): ...

class PostGenerationContext(T.NamedTuple):
    value_provided: bool
    value: T.Any
    extra: T.Dict[str, T.Any]

class PostGenerationDeclaration(BaseDeclaration):
    FACTORY_BUILDER_PHASE: Incomplete
    def evaluate_post(self, instance, step, overrides): ...
    def call(self, instance, step, context) -> None: ...

class PostGeneration(PostGenerationDeclaration):
    function: Incomplete
    def __init__(self, function) -> None: ...
    def call(self, instance, step, context): ...

class RelatedFactory(PostGenerationDeclaration):
    UNROLL_CONTEXT_BEFORE_EVALUATION: bool
    name: Incomplete
    defaults: Incomplete
    factory_wrapper: Incomplete
    def __init__(self, factory, factory_related_name: str = ..., **defaults) -> None: ...
    def get_factory(self): ...
    def call(self, instance, step, context): ...

class RelatedFactoryList(RelatedFactory):
    size: Incomplete
    def __init__(self, factory, factory_related_name: str = ..., size: int = ..., **defaults) -> None: ...
    def call(self, instance, step, context): ...

class NotProvided: ...

class PostGenerationMethodCall(PostGenerationDeclaration):
    method_name: Incomplete
    method_arg: Incomplete
    method_kwargs: Incomplete
    def __init__(self, method_name, *args, **kwargs) -> None: ...
    def call(self, instance, step, context): ...
